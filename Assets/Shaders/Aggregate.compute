/*
 * Hardware Depth Unprojector (compute shader)
 * 
 * Copyright 2020 (C) Bartosz Meglicki <meglickib@gmail.com>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Compute shader for geometry aware point cloud aggregation.
 * The result is kept in cicrular StructuredBuffer.
 *
 * This is Unity flavour HLSL. You may recompile it with Unity for OpenGL, Vulkan etc.
 */

#pragma kernel AggregateKernel

#include "UnityCG.cginc"

CBUFFER_START(UnprojectionArgs)
    int Points; //aggretatedVertices buffer size (Metal does not support GetDimensions queries on buffer)
    float BaselineM; //stereovision baseline, e.g. 0.095 for Realsense D455
    float ZMoveM; //Z axis displacement in metres
CBUFFER_END


struct VertexData
{
    float4 position;
    float4 color;
};

float4x4 transform; //typically local to world matrix

StructuredBuffer<VertexData> vertices;
RWStructuredBuffer<VertexData> aggregatedVertices;

[numthreads(1,1,1)]
void AggregateKernel (uint3 id : SV_DispatchThreadID)
{
    VertexData vin = vertices[id.x];

    //float sqrt3 = 1.732050808;

    if( (vin.position.z < vin.position.x + ZMoveM) || 
        (vin.position.z < BaselineM - vin.position.x + ZMoveM ) || 
        (vin.position.z < abs(vin.position.y) * 1.732050808 + ZMoveM) )
    {
        uint i = aggregatedVertices.IncrementCounter() % Points;
        vin.position =  mul(transform, vin.position);
        aggregatedVertices[i] = vin;
    }
}
